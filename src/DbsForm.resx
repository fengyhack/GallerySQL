<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJI9hEiSP
        YnIolGdmLJhtTDCdczI0oXgYN6R8AgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAADmnfxA2o3s2Mp91Wi6acHwqlmqVJ5JlYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        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
        bXwplGh+JZBidCSPYQ4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA///////////////////////////////f4AAAD+AAAAfgAAAD+A//h///
        /4f+f/+H/48+B/vAHI/74AGP8/DBh/P/4Yfz//OH8///h+P//+fj///fw///D8AAAA/AAAAP4AAAD///
        //////////////////////////////////8=
</value>
  </data>
</root>